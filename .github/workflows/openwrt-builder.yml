name: Build ImmortalWrt for N1

on:
  workflow_dispatch:
   inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
        
  repository_dispatch:
    types: [Source Code Update]

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  CONFIG_FILE: N1/.config
  DIY_SH: N1/diy.sh
  FILES: N1/files
  MAKE_DOCKER_SH: docker/make_docker_image.sh
  DOCKER_OUTPATH: out
  DOCKER_IMG: 1911086027/openwrt_cortex-a53:personal
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.TOKEN }}

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 准备完成
      uses: actions/checkout@main

    - name: 清理空间
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
        
        
    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get update -y
        sudo -E apt-get install -y $(curl -fsSL https://raw.githubusercontent.com/nantayo/My-Pkg/master/2305)        
        sudo -E systemctl daemon-reload
        sudo -E apt-get autoremove --purge
        sudo -E apt-get clean
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        sudo rm -rf ~/{.cargo,.dotnet,.rustup}
        sudo timedatectl set-timezone "$TZ"
        
    - name: 编译空间扩容
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "${mnt_size}"G /mnt/mnt.img
        sudo truncate -s "${root_size}"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        sudo mkdir -p /workdir
        sudo mount /dev/github/runner /workdir
        sudo chown -R runner.runner /workdir
        df -Th

    - name: 克隆源码
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH --single-branch --depth=1 --filter=blob:none openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 缓存构建动作
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: N1-${{ env.REPO_BRANCH }}
        prefix: ${{ github.workspace }}/openwrt

    - name: 更新 & 安装 feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e $FILES ] && mv $FILES openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SH

    - name: SSH 连接到 Actions
      uses: P3TERX/ssh2actions@main
      if: (github.event.inputs.ssh == 'true') || contains(github.event.action, 'ssh')

    - name: 下载软件包
      working-directory: ./openwrt
      run: |
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      run: |
        chmod -R 755 openwrt
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "compile_status=success" >> $GITHUB_ENV

    - name: 打包镜像文件
      if: ${{ env.compile_status }} == 'success' && !cancelled()
      uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*.tar.gz
        KERNEL_VERSION_NAME: 6.6.y_6.1.y_5.15.y_5.10.y_5.4.y
        PACKAGE_SOC: s905d
        WHOAMI: pumpkin

    - name: 生成发布标签
      if: ${{ env.PACKAGED_STATUS == 'success' }} && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H.%M")" >> ${GITHUB_OUTPUT}
        touch release.txt
        echo "
        🍁 注意事项：首次使用建议全新刷写
          
        💻 适用机型: 斐讯N1

        📂 源码: ${{ env.REPO_URL }}

        🌳 分支: ${{ env.REPO_BRANCH }}

        ⏱️ 编译时间: $(date +"%Y年%m月%d日%H时%M分")

        🌐 管理地址: 192.168.128.3

        👤 用户名: root

        🔒 密码: password 
        
        " >> release.txt
        echo "tag_status=success" >> $GITHUB_ENV

    - name: 发布固件到 Releases
      uses: softprops/action-gh-release@v2
      if: ${{ env.tag_status == 'success' }} && !cancelled()
      with:
        tag_name: OpenWrt_${{ env.PACKAGED_OUTPUTDATE }}
        files: ${{ env.PACKAGED_OUTPUTPATH }}/*.img.gz
        body_path: release.txt
        token: ${{ env.GITHUB_TOKEN }}

#docker-uploader
    - name: 创建Docker镜像
      if: ${{ env.compile_status == 'success' }} && !cancelled()
      run: |
        chmod +x ${MAKE_DOCKER_SH}
        ${MAKE_DOCKER_SH}
        echo "docker_status=success" >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 登录Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: 上传Docker Hub
      if: ${{ env.docker_status == 'success' }} && !cancelled()
      uses: docker/build-push-action@v5
      with:
        push: true
        platforms: linux/arm64
        context: ${{ env.DOCKER_OUTPATH }}
        tags: ${{ env.DOCKER_IMG }}
        
    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1
        token: ${{ env.GITHUB_TOKEN }}

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 2
        delete_tags : true
